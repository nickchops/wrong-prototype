{"name":"WRONG Prototype","tagline":"Weaponified Reverse pONG - Marmalade Quick demo game - prototype version","body":"This repository contains the source for a prototype Marmalade Quick game.\r\n\r\nIt was built as part of a blog series on getting started with Marmalade Quick, by Marmalade employee (and owner of this github account) Nick Smith. Marmalade Quick is 2D rapid development middleware that ships with the Marmalade cross platform SDK. It allows you to code 2D games quickly using Lua and, combined with the regular Marmalade tools, lets you easily publish to mobile platforms, PC and Mac.\r\n\r\nThe original blog posts started from this page:\r\nhttp://www.madewithmarmalade.com/blog/building-marmalade-quick-game-nick-smith-part-1-getting-started\r\n\r\nThe Marmalade website was re-designed in late 2013 and the blog is currently being moved. In the meantime, you may be able to access the old version by replacing \"www\" with \"legacy\" in the URLs. For example:\r\nhttp://legacy.madewithmarmalade.com/blog/building-marmalade-quick-game-nick-smith-part-1-getting-started\r\n\r\nThe Quick blog posts are also reproduced below...\r\n\r\n---------------------------------------------------------\r\n\r\n# Building a Marmalade Quick Game with Nick Smith, part 1: Getting Started\r\n\r\nNow that Marmalade Quick is available ([download it right here](http://www.madewithmarmalade.com/quick)), I'll be building an app or two with Marmalade Quick and doing regular blog posts detailing the highs and lows encountered on the way. I'll be highlighting features, walking through how to use both tools and APIs, and giving tips and hints for getting the most out of Marmalade Quick. Since we've just gone into the first full release following a public beta version, I'll also be highlighting changes from the beta version, giving updates on new features we've added and previewing what's on the way in the next release.I started using Marmalade Quick in earnest over Christmas, with little-to-no Lua experience and having never worked on any of its internals or design. These blog posts will take us from \"What is Marmalade Quick?! What is Lua?!\" right through to uploading to the various stores and dropping the source onto GitHub.\r\n \r\n## So, what actually is Quick?\r\nMarmalade Quick aims to be the fastest, most flexible, most open way to create cross-platform 2D games and apps for mobile devices.\r\n\r\nMarmalade itself is a C++/native SDK for building high-performance apps with a single open-standards API set, and deploying them effortlessly to a wide range of devices - iOS, Android, BlackBerry 10, Windows, Mac... - without needing to use any OS-specific code or tools.\r\n\r\nMarmalade Quick is essentially middleware that sits on top of Marmalade and provides a high level, easy-to-use interface via the Lua scripting language. Quick allows you to write interactive apps using 2D graphics, physics and touch interactivity in as little as 15 lines of code. Internally it uses best-in-class C++ modules like Cocos2D and Box2D to do the hard work for you.\r\n\r\nMarmalade Quick comes with pre-built C++ apps and open source Lua scripts that combine to load and run your Lua/Quick code. You don't need to touch or understand the C++ parts, but both those and the Lua internals are provided as source, which you can modify and extend if you want. Quick comes with Lua wrappers for the core Marmalade C APIs plus its own 2D graphics and physics APIs. You can essentially extend Marmalade Quick to provide Lua interfaces to any Marmalade C APIs (we'll cover that in a future post!).\r\n\r\nMarmalade Quick also has a new Launchpad tool that lets you manage, run and deploy projects from a simple interface without touching an IDE or Marmalade's standard deploy tool.\r\nSo what does that mean in practice? Basically, you open the Launchpad, click \"New Project\", type some simple Lua code in a text editor, and get a 2D game up and running with no C++ or graphics programming knowledge. You can hit \"Launch\" to test on desktop, \"Deploy\" to run on devices and \"Publish\" to spit out a build ready for an app store.\r\n \r\n## What you need to use Marmalade Quick\r\nDownload, license and install the latest Marmalade SDK build from here: https://www.madewithmarmalade.com/downloads\r\n\r\nNew users can sign up for free and use an eval license (eval licenses mean deployed apps will be watermarked and not valid for publishing). You can use Mac or PC for both Marmalade SDK and Quick and you can deploy to all standard platforms with either.\r\n\r\n~~Download Marmalade Quick for Windows or Mac from here:~~\r\n~~http://www.madewithmarmalade.com/quick~~\r\n~~Its a zip file, just extract it into the root folder of your 6.2 SDK. It's safe and only adds files (no overwriting). On Mac, make sure you *merge* folders instead of replacing them! (use terminal with \"rsync -arvu \" if needed)~~\r\n**(Quick is now bundled inside the regular Marmalade SDK and requires no additional setup steps)**\r\n\r\nDocumentation for Marmalade Quick is online here:\r\n~~http://quick-docs.madewithmarmalade.com~~\r\n**(now at http://docs.madewithmarmalade.com/display/MD/Marmalade+Quick)**\r\n\r\nWe don't currently offer offline documentation, ~~but feel free to save them from the browser. Search will work without an Internet connection.~~\r\n\r\nMarmalade Quick doesn't need any additional SDKs or even an IDE. You can edit game code in a text editor, the app binary is pre-built for you and your code is compiled automatically at runtime.\r\n\r\nAs with the regular Marmalade SDK, in order to deploy to devices, you will need:\r\n- iOS and BlackBerry signing assets and accounts (certificates, profiles etc - we'll cover these in       another post!)\r\n- Java runtime for Android and BlackBerry signing\r\n- On Mac you need Python 2.6 or newer (python ships built-in with Marmalade for Windows)\r\n\r\n## First steps\r\nOnce Marmalade is installed (and licensed - follow the registration prompt at the end of installation), just go to /quick/tools and run the Quick Launchpad exe/app file from there.\r\n\r\nFollow the steps in A Quick App in 5 Minutes in the docs:\r\n~~http://quick-docs.madewithmarmalade.com/AQuickAppIn5Minutes.html~~\r\n**(http://docs.madewithmarmalade.com/display/MD/A+Quick+App+in+5+Minutes)**\r\n\r\nI'll be walking through some real world code in the next few posts. For now, I'd encourage you to dive in and see what you can build! A good starting point is the examples in quick/data/examples (there's a lot more there than the ones listed by default in the Launchpad).\r\n\r\nQuick tip: You don't need to close and re-launch the Simulator when you edit code. Just save your Lua file(s) and hit Ctrl-R in the Simulator to reload the Lua code. Ctrl-T will restart the whole app (useful if you manage to really confuse the Simulator).\r\n \r\n## Where is Support for Platform X?\r\nQuick is completely platform-independent: There is, for example, no iOS-specific code anywhere in it. Marmalade itself takes care of platform abstraction and so Quick will technically run on *all* Marmalade-supported devices. However, for Quick we decided to implement a new project management and deployment GUI, the \"Quick LaunchPad\", which provides a new front end to Marmalade's existing deployment tools. In the initial release, only iOS, Android, BlackBerry PlayBook and BlackBerry 10 are provided in the Launchpad, and not all of the usual Marmalade deployment options (for things like specific icons and permissions) are supported. However, you can still run Marmalade Quick with all existing Marmalade deploy options on all supported platforms...\r\nYou'll need to use the standard Deploy Tool in order to access additional platforms and options. You can launch this directly from within the new Launchpad:\r\nIn the launchpad, use the Advanced > Launch Deploy Tool option\r\nUnder \"Stage: Select Build\" choose ARM GCC Release for devices or x86 Release for desktop\r\nUnder Platform Selection choose the OS/platforms you want to deploy to\r\nUnder Configuration, select the options you need (see below)\r\nUnder Deploying, do \"package\" or \"package and install\" to put on device.\r\nStandard Deployment Tool settings are all documented here\r\nNote that Quick has not been well tested against the Marmalade 6.2 beta SDK for Windows Phone 8 and we are not officially supporting Quick on WP8 yet.\r\n\r\n**(NB: From Marmalade 7.0, Quick uses the new Marmalade Hub GUI and supports most platforms out of the box. See http://docs.madewithmarmalade.com/display/MD/What+do+we+support)**\r\n\r\n---------------------------------------------------------\r\n\r\n# Building a Marmalade Quick Game with Nick Smith, part 2: Getting to Grips with Lua\r\n\r\nI'll preface this post by saying that I'm mostly a C++ and Python developer these days. I first used Quick when the alpha release came out and only seriously dove into it over Christmas. Before Quick, I had only ever used Lua to set a few values in scripts for games and had basically no concept of how it actually works; most \"issues\" I encountered getting to grips with Quick, were actually just getting to grips with Lua!The way I talk about Lua objects and behaviour here is also going to be coloured heavily by my use of C++ and object oriented (OO) programming, so I will definitely be misusing technical terms as much as I possible can. As a first step for users who are new to Lua, I very much recommend that you understand how it handles objects/values, specifically the way that everything is a reference and everything is global by default. With that in mind, for this post I'm going to skip Quick almost entirely and kick off with an idiots guide to Lua.\r\n \r\n## Whitespace and block endings\r\n- Lua uses whitespace only to separate API calls. Unlike Python for example, indentation is irrelevant and only used to make code readable.\r\n- Lua does not have any end-of-line characters (like semicolons in C/Java)\r\n- Code blocks such as if statements, functions and for loops use the \"end\" keyword to enclose their content\r\n\r\nExample:\r\n```lua\r\nfunction MyFunction(value)\r\n    value = value * 5\r\n    if value > 20 then\r\n        print(\"value > 20\")\r\n    elseif value > 10\r\n        print(\"value > 10\")\r\n    end\r\n    if value then print(\"value is \" .. value) end\r\nend\r\n```\r\n\r\nTip: Concatenate strings and numbers using '..' as above.\r\n \r\n## Comments\r\n- Comments are any text following two hyphens (--) in a line.\r\n- Multi-line comments start with --[[ and end with ]]--\r\n \r\n## Lua is small!\r\n- There are no classes, private/public, queues or other fancy data types, etc.\r\n- Implement them yourself! Or better, find a module from the web.\r\n- Lua has no +=, ++, etc. operators or any shorthand notation. Ctrl-C/V is your friend!\r\n \r\n## Value types\r\n \r\nLua only provides the following types:\r\n- floating point numbers - there is no integer type and no concept of short vs long, float vs double, etc. Just write the number to declare it\r\n- strings - just declare using value=\"my string here\"\r\n- tables (access a group of value by keys)\r\n- functions\r\n- true & false\r\n- nil - no object, like null or nil in other languages\r\n- Tables\r\n- Tables store values (numbers/strings/functions/tables) which are indexed by keys. A key can be any Lua type (string/number/function/table).\r\n\r\nExample:\r\n```lua\r\nmytable = {} --empty table\r\nmytable = {\"hello\", \"value two\", 7, 5, \"another value\"}--table initialised with values - no specified keys means keys are auto-assigned numbers starting at 1 (1,2,3,4, etc)\r\nmytable2 = {name = \"bob\", age=20, colour=\"orange\"} --special case: you can initialise values with string keys like this.\r\n```\r\n\r\nYou can access table values as follows:\r\n```lua\r\nprint(mytable[1]) --prints hello\r\nprint(mytable[\"age\"]) --prints 20\r\nprint(mytable.age) --prints 20\r\nprint(mytable.1) --error! can't use numbers with the dot operator\r\n```\r\n\r\nDynamic assignment:\r\n- Variable types are dynamic, so you can do things like:\r\n```lua\r\na=1 then a=\"string\" then a = {} then a = myFunction()...end\r\n```\r\n\r\n## nil\r\n- You can include an undeclared variable in your code and instead of causing an error/exception, it will just evaluate to nil.\r\n- In conditionals (if, while, etc), nil evaluates to false.\r\n- Unlike in C, zero is *not* equivalent to false, so \"if 0\" evaluates to true.\r\n\r\n## Functions\r\n- Functions objects are declared with the \"function\" keyword and a parameter list in parentheses \"()\".\r\n- A function with parentheses in your code calls the function.\r\n- Specifying it without parentheses treats it as a value that is passed by reference like other objects (see further down).\r\n- Parameters are local variables pointing to the object passed to the function (ditto).\r\n\r\nExample:\r\n```lua\r\nfunction myFunction(someValue)\r\n    print(someValue)\r\nend\r\n\r\nmyVar = myFunction\r\n    myVar(\"hello\") --prints \"hello\"\r\n    anotherVar = myVar\r\n    anotherVar(\"goodbye\")\r\n \r\nmyTable = {}\r\nmyTable.memberFunction = function()\r\n    --do something here\r\nend\r\n```\r\n\r\n## References and values\r\n- Everything in Lua is an object\r\n- Variables are all references that point at these objects, so all variable assignments are by reference!\r\n- Strings and numbers are essentially immutable objects, so when you do myVariable=\"mystring\" you are essentially saying \"create an object, 'mystring'\" and \"myVariable is a pointer to that object\".\r\n- If you have two variables referring to the same string and set the first variable to another string, it wont change the second variable; they are now pointing to different strings.\r\n- Think of every unique number or string as a new object defined somewhere inside Lua.\r\n- This is why you can use a string as a key in a table and not worry about the key itself changing.\r\n\r\nExample:\r\n```lua\r\na=5\r\nb=a\r\nc=7\r\n  -> a=5, b=5, c=7 (a and b are references to same number!)\r\n \r\na=2\r\n  -> a=2, b=5, c=7 (we're not changing the value of a number when we change a! b still points to the object \"5\")\r\n \r\na=\"a string\"\r\nb=a\r\n  -> a=\"a string\", b=\"a string\" (both variables are references to same string object)\r\n \r\na=\"another string\"\r\n  -> a=\"another string\", b=\"a string\"\r\n \r\na = { key1=2, key2=4, key3=\"hello\" }\r\nb = a\r\n  -> b & a refer to same object\r\n \r\na.key1 = \"new value\"\r\n  -> b.key1 = \"new value\"\r\n```\r\n\r\nWhen using things like function declarations and for loops, bear in mind that you are assigning by reference still and the parameters in those are all new *local* variables pointing to some object.\r\nSo \"v\" in \"for k,v in pairs(myTable)\" (see for loops below) is just a new reference to the object myTable[k] points to. Doing v=newValue wont change the object in the table (myTable[k] will still return the old value), but both v & myTable[k] will return a pointer to the same object.\r\n\r\nHowever, for tables, you can change the values *inside* a table since they are also references:\r\n```lua\r\na = {one=1, two=2, three=3}\r\nb = a\r\nb.one=7\r\n  -> a.one = 7 (because we have accessed the \"one\" variable and made it point to a new object)\r\n```\r\n\r\n## Default parameters for functions\r\nYou can pass fewer parameters to a function than it expects, in which case the un-set ones ones will just be nil. You can use this to implement default parameters, but only for values at the end of the list.\r\n\r\nExample:\r\n```lua\r\nmyFunction = function(v1,v2,v3,v4,v5)\r\n    v4 = v4 or 100 --default to 100 if nil\r\n    v5 = v5 or \"something\"\r\n    ...\r\nend\r\n```\r\n\r\n## Variable Scope (local vs global)\r\n- By default, all variables are global! This is unusual if you're coming from C, Python, etc.\r\n- If you have two (global) variables of the same name in different functions, they will point to the same object.\r\n- You have to explicitly use the \"local\" keyword to declare a variable local.\r\n\r\nThis is a typical place to create buggy code! Bear local vs global and code order in mind if you get errors like \"value is nil\" or you expect an event function to be called and nothing happens.\r\n\r\nA common error I've seen is having a local-declared Quick scene object and having a global function for that object, but the function is declared first so Lua thinks the local object is different to the global similarly-named one...\r\n\r\nExample:\r\n```lua\r\nfunction myScene:setUp(event)\r\n    ...\r\nend\r\n\r\nlocal myScene = director:createScene() -- myScene here is NOT the same \"myScene\" as the one above! This is a new local object!\r\n```\r\n\r\n## Destruction and garbage collection\r\n- Lua has no explicit destructor for objects.\r\n- The \"nil\" operator is similar to null in other languages.\r\n- Lua garbage-collects objects when there are no longer any active references to them.\r\n- To make sure there are no references to an object, set all variables that pointed to the object to be nil.\r\n- Lua uses incremental mark and sweep garbage collection.\r\n- By default, garbage collection runs at some interval which is not opaque to the user.\r\n\r\nBackground reading:\r\n- Intro to GC: http://www.lua.org/manual/5.1/manual.html#2.10\r\n \r\n## For Loops\r\n \r\nLua provides 3 useful types of for loop:\r\n- numeric - like a C for loop\r\n- pairs - for looping through an arbitrary table\r\n- ipairs - for looping through an \"array\" style table (see further down)\r\n\r\n### Numeric:\r\n```lua\r\nfor var=exp1, exp2, exp3\r\n    do something\r\nend\r\n```\r\n- var is a local variable that only exists in the loop.\r\n- var starts at exp1, increments by exp3, loop ends when var > exp2\r\n- exp1/2/3 must all be integers.\r\n- exp 3 is optional; defaults to 1.\r\n- Don't change var during the loop! Behaviour is unpredictable.\r\n- All three expressions are evaluated once, before the loop starts.\r\n\r\nExample:\r\n```lua\r\nfor n=5, math.min(somevalue, 0), -1 do\r\n    print(n) --loop will run 5 times, math.min is called once\r\nend\r\n```\r\n\r\n### pairs (generic for loop):\r\n```lua\r\nfor key,value in pairs(myTable)\r\n    do something\r\nend\r\n```\r\n- As above, variables are local to the loop and pairs is only run once\r\n- \"value\" is optional (use \"for key in pairs(...\" if you only care about the key)\r\n- The loop may go through keys in any arbitrary order. If your keys are 1,2,3,4, etc. they may not be accessed in that order!\r\n- Use myTable.key= to change the table, not value= (see below)\r\n\r\n### ipairs:\r\n```lua\r\nfor key,value in ipairs(myArray)\r\n    do something\r\nend\r\n```\r\n- As above but designed for tables that are \"arrays\" (keys are ordered integers starting at 1 - see below).\r\n- The loop goes from key=1, in order 2,3,4,etc till the last key that is not nil.\r\n\r\nYou can break out of a for loop with the \"break\" keyword. Sadly there is no \"continue\" keyword in Lua.\r\n \r\n## Tables as \"arrays\"\r\n \r\nLua tables can be treated as arrays if the keys are all contiguous integers, starting from 1.\r\n\r\n- Lua arrays start at 1 not zero!\r\n- You can initialise an array easily by not specifying keys, as in our earlier example:\r\n```lua\r\nmytable = {\"hello\", \"value two\", 7, 5, \"another value\"}\r\n```\r\n- Get the length of an array using table.getn(myTable). NB: \"table\" is a global object with various helper functions for other tables\r\n- The length of an array is defined as the last integer index, starting at 1, which does not have a value of nil.\r\n- Therefore, if you set a value in the middle of the array to nil then the rest of the array is then ignored in subsequent for ipairs() loops and table.getn() becomes unpredictable!\r\n\r\nChanging arrays:\r\n- Arrays are dynamic (as they are tables) so you can add and remove values.\r\n- Add to an array using table.insert(myTable, value, )\r\n- Remove from an array using table.remove(myTable, )\r\n- Using .remove makes the table automatically fill the hole by moving other values down one index. Using myTable[index] = nil will NOT make the table re-size (actually it may depending on Lua implementation but it's not guaranteed so don't do it!).\r\n- Warning! The value returned by table.getn() is updated when you do inserts, but not removes!\r\n- If you set the LAST element to nil, then the array WILL \"shrink\" inside for ipairs() loops, but the behaviour of table.getn() isn't guaranteed.\r\n\r\nSounds bug-friendly, right? It's probably safer to track dynamic array sizes yourself with a custom variable than to use table.getn().\r\n\r\nIf you are adding and removing a lot of values in loops and don't care about the index value being a list of integers, I'd recommend just using a table with unique IDs as keys. That means you can add and remove from all over your code without fear of bugs.\r\n\r\n## Tables as \"classes\" and the hidden \"self\" parameter\r\nLua functions can be passed an implicit \"self\" reference by declaring functions using the \":\" operator as opposed to \".\"\r\n\r\nExample:\r\n```lua\r\nSimple function:\r\nmyObject = {}\r\nmyObject.name = \"bob\"\r\nmyObject.myFunction = function(value)\r\n    print(\"value\")\r\nend\r\n \r\nmyObject.myFunction(\"hello\")\r\n\":\" version:\r\nmyObject = {}\r\nmyObject.name = \"bob\"\r\nmyObject:myFunction = function(value)\r\n    print(\"value, my name is \" .. self.name) -- we can access the table that owns this function using \"self\"\r\nend\r\n\r\nmyObject:myFunction(\"hello\") -- now prints \"hello, my name is bob\"\r\n```\r\n\r\nThis is used a lot in Marmalade Quick, e.g. the event functions for scenes.\r\n\r\nWe can take advantage of this to create \"classes\" and do proper Object-Oriented (OO) coding. This is pretty fundamental if you want to have dynamically-created objects and to get access to objects from events. Note that there is no actual Lua concept of a \"class\", we are inventing it here!\r\n\r\nExample:\r\n```lua\r\nMyClass = {} --declare a global table that will \"create\" objects of this \"class\" for us\r\nMyClass.__index = MyClass -- .__index uses Lua's \"metatable\" feature to allow one table to use functions and values from another\r\n-- a global function to create objects (tables) that all have the values and classes of MyClass\r\nfunction MyClass.Create(someInitialiserValue, anotherInitialiser)\r\n    local myObject = {} -- create object\r\n    setmetatable(myObject,MyClass) -- give access to MyClass members\r\n    myObject.val1 = someInitialiserValue\r\n    myObject.val2 = anotherInitialiser\r\nend\r\n \r\nfunction MyClass:PrintSomeValueAndVal1(someValue)\r\n    print(someValue)\r\n    self:PrintVal1()\r\nend\r\n \r\nfunction MyClass:PrintVal1()\r\n    print(self.val1)\r\nend\r\n \r\nsomeObject = MyClass.Create(4,8)\r\nsomeObject:PrintSomeValueAndVal1(27)\r\n \r\nsecondObject = MyClass.Create(5,1)\r\nprint(secondObject.val2) -- can access members still like any table\r\n```\r\n\r\nNB: you can still call functions without the \":\", in which case they expect self to be passed! This can lead to bugs, e.g. someObject.PrintSomeValueAndVal1(27) would result in self=27 and someValue=nil! Be aware of this generally when using . vs : with Quick's API. Getting an error with param = nil when you know you have passed the values expected is a typical indication of using . instead of :\r\n \r\n## Including code from other files\r\nUse \"doFile\" to load and execute another file.\r\n```lua\r\ndoFile(\"path/to/otherfile.lua\")\r\n```\r\nThis is the same as just substituting the doFile statement with the contents of the other file. So, if otherfile has a \"return\" statement at the end, you can do:\r\n```lua\r\nmyValue = doFile(\"path/to/otherfile.lua\")\r\n```\r\n\r\nYou can also use \"require\", which does the same thing but searches a list of paths and won't re-load code that has already been included with another require call. That makes it more like normal \"library loading\" and generally a better idea for large projects. See http://www.lua.org/pil/8.1.html\r\n \r\n## Some Thoughts on Lua as a Noob\r\nAs a big fan of Python (for non-gaming), I find Lua a little frustrating in that the syntax is so small. No +=, no built-in classes, no default parameters... Lua is not meant for throwing together a complex bit of hard-core data processing in a few lines! As a C person, I also wish I could control garbage collection better. However the \"every variable is a reference; everything object is a string/number/function/table\" simplicity of Lua is a breath of fresh air in terms of knowing exactly what's going on without having to understand any Lua internals at all. Once you get that and how to do pseudo-classes, you pretty much know everything about Lua! It's very easy in something like Python to get lost building a pass-by-value monster chunk of data that kills all your RAM. Lua objects are super-easy to visualise and it's pretty easy to produce fast, efficient code.\r\n\r\nNext time we'll be putting all that into practice building a real game. We'll see how Quick uses lua \"classes\" to implement it's \"objects\", \"libraries\" and \"events\" and how to best take advantage of Quick's node-based scene management.\r\n\r\n# Building a Marmalade Quick Game pt 3: Building the \"Wrong\" Prototype\r\n\r\nHaving played around briefly with the Quick examples, I decided to go straight for building a game and to figure out the rest on the way. I wanted something with some simple controls and screens that I could build on and polish later. I recently unearthed a very old nameless pong clone that I'd built in an old visual game maker app a very long time ago. It's basically pong with weapons, but backwards as you have to avoid the balls. I've decided to resurrect and improve my little reverse-pong game, now official know as \"Wrong\" (Weaponified Reverse pONG!) I'll be re-building Wrong from scratch and adding new features as I go. These blog posts will include code snippets that you can steal and learn from. At the end I'll upload to iOS, Android, BlackBerry and Windows Phone 8 stores, plus put the full source code up on GitHub.\r\n \r\nThe screen below gives you and idea of the original looked:\r\n![original game screenshot](http://i1353.photobucket.com/albums/q663/GazDeaves/protowrong_zps20a235a9.png)\r\n\r\nBe warned that the final version is not gonna look quite like that!\r\n\r\nTo implement Wrong, we basically need:\r\n- a background image\r\n- objects for the player \"sleds\"\r\n- ball objects\r\n- counters for health\r\n- counters, icons and objects for all the weapons\r\n- controls to move the players\r\n- logic for ball and weapon movement, bouncing and collision detection for hitting players\r\n- health, weapon firing and power-up logic\r\n- lots of simple animations for impacts etc.\r\n- menus and battle setup logic\r\n\r\nImportantly, we also need to put some thought into adapting the game for modern devices:\r\n- The original version was fixed at 640x480 fullscreen for PC; the new one needs to run on phones and tablets in all sorts of resolutions and aspect ratios (just take a look at http://en.wikipedia.org/wiki/Comparison_of_Android_devices !!).\r\n- The original was 2 player only, on a single device; the new one probably ought to have some one player and networked play options (two players on one phone? Not likely!).\r\n- The original was controlled by each player having keyboard keys for up, down, fire and a separate key to select each weapon; the new one will need to support touch-only interfaces.\r\n- The original graphics are nice in an amateur pixel art kind of way; I want something a little more polished and memorable.\r\n\r\nInitially, I just needed a prototype and to keep it simple, so I decided to skip weapons and controls for player 2, plus stick with single-touch controls and keep the menu super-minimal. This will be a learning experience; we want to get something off the ground, see what Quick is capable of and then make some design decisions based on that before doing any serious coding.\r\nI ripped the graphics files out of the original to get some art to work with, though at the prototype stage I'll be using some vectors to avoid wasting time polishing bitmaps that will probably not make it into the final build anyway. I'm also starting with little in the way of animation, but will build on that later.\r\n\r\n## Creating scenes and a background\r\nI'm including all the source and steps for the prototype build. Feel free to follow along.\r\n\r\nStarting a new project:\r\n1. Open /quick/tool/quickLaunchPad.exe/app\r\n1. Create a New Project\r\n1. Click \"Open Folder\" to get to the project source\r\n1. All assets including the Lua source live in \"resources\" by default, so open that folder.\r\n\r\nNB: by default quick will package *all* files in that folder into your app when you deploy to device. Exisiting Marmalade users will notice that it's included in the project's \"assets\" block. If you're new to Marmalade we'll cover that stuff at a later date.\r\n\r\nI'm going to use backdrop.png (ripped from my old game) so I've put that in resources/textures. To get started, edit main.lua (I recommend Notepad++ or the ZeroBrane Lua editor). This is the default main code file for Marmalade Quick.\r\n\r\n```lua\r\n-- app globals\r\nappWidth = director.displayWidth\r\nappHeight = director.displayHeight\r\nbattleCount = 0\r\n \r\n-- Main menu --------------------------------------------------------------------\r\n \r\nsceneMainMenu = director:createScene() --this becomes the current scene automatically\r\n \r\nfunction sceneMainMenu:setUp(event) -- declare a member functions of the scene object\r\n    dbg.print(\"sceneMainMenu:setUp\")\r\n \r\n    -- adding a label as member of the scene itself allows us to manage it easily\r\n    self.label = director:createLabel({x=appWidth/2, y=appHeight/2, text=\"Main Menu\"})\r\n    self.label.x = self.label.x - self.label.xText/2\r\nend\r\nfunction sceneMainMenu:tearDown(event)\r\n    dbg.print(\"sceneMainMenu:tearDown\")\r\n    self.label = nil -- good practice to nil unused objects\r\nend\r\n \r\nsceneMainMenu:addEventListener({\"setUp\", \"tearDown\"}, sceneMainMenu)\r\n \r\n-- battle screen -------------------------------------------------------\r\n \r\nsceneBattle = director:createScene()\r\nfunction sceneBattle:setUp(event)\r\n    dbg.print(\"sceneBattle:setUp\")\r\n \r\n    -- director:create makes the current scene the parent node. The scene keeps a reference to its children.\r\n    -- director's coordinates (x=,y=) are relative to the parent, i.e. the scene in this case which always\r\n    -- has (0,0) at the bottom left of the screen\r\n    background = director:createSprite(0, 0, \"textures/backdrop.png\") --file paths are relative to the root of the \"resources\" folder\r\n \r\n    -- debug label to check we're in right scene!\r\n    self.label = director:createLabel({x=appWidth/2, y=30, text=\"Battle \" .. battleCount})\r\n    self.label.x = self.label.x - self.label.xText/2\r\nend\r\n \r\nfunction sceneBattle:tearDown(event)\r\n    dbg.print(\"sceneBattle:tearDown\")\r\n    self.label = nil\r\n \r\n    background:removeFromParent()\r\n    background = nil\r\n \r\n    dbg.print(\"sceneBattle:tearDown done\")\r\nend\r\nsceneBattle:addEventListener({\"setUp\", \"tearDown\"}, sceneBattle)\r\n \r\n------------------------------------------------------------------------------------\r\n \r\ndirector:moveToScene(sceneMainMenu) -- start game with instantaneous change to main menu (last scene created is current)\r\n \r\n-- simple global event to change current scene on touch\r\nlocal touch = function(event)\r\n    if event.phase == \"began\" then\r\n        if director:getCurrentScene() == sceneMainMenu then\r\n            battleCount = battleCount+1\r\n            director:moveToScene(sceneBattle, {transitionType=\"slideInL\", transitionTime=0.5})\r\n        else\r\n            director:moveToScene(sceneMainMenu, {transitionType=\"slideInL\", transitionTime=0.5})\r\n        end\r\n    end\r\nend\r\nsystem:addEventListener(\"touch\", touch)\r\n```\r\n\r\nA couple of notes:\r\n- I'm using global variables for the scene to keep it simple\r\n- setUp and tearDown are predefined valid event names for scenes\r\n- By declaring them as member variables using the \":\" operator, we get an automatic \"self\" reference to the scene itself from within the function.\r\n- addEventListener registers a list of members (i.e. functions by name) for the given table (i.e. the scene)\r\n- Let's run the code. On the Test tab in the launchpad, make sure Debug mode is selected and hit the Launch button. You should get an assert message box pop up when clickting to change the scene. It's fairly obviously pointing to a missing texture file. If you hit continue or ignore, the app will eventually display an error message and quit. This is because the lack of texture is an unrecoverable error. Quick looks for assets in the \"resources\" folder, so save the image below to resources/textures/backdrop.png.\r\n\r\n![stars backdrop image](https://f.cloud.github.com/assets/1637721/623109/78a18eae-cf59-11e2-854b-122e04c83c13.png)\r\n\r\n## Debug vs Release\r\nTry running again with Build Mode set to Release in the Launchpad. Note that in release mode you only get the error message and no asserts. But you still get a stack trace (in orange) in the console view.\r\n\r\nEverything should work with the texture added, but the screen size probably doesn't match the background size (depending on if you've been fiddling with the Simulator previously...) Go to Simulator > Configuration > Surface and set the width and height to 640x480 to match our background. Restart the app with Ctrl-T. Ctr-T is needed to restart the whole app - rather than Ctr-R, which just reloads the lua code - since Quick has internally cached the screen size on startup.\r\n\r\nWe've got a huge image as our background and it's mostly black - a bit of waste of resources. Why not have a randomly generated star-field instead! In setUp, replace the background creation with:\r\n\r\n```lua\r\n    background = director:createRectangle({\r\n        x=0, y=0,\r\n        w=appWidth, h=appHeight,\r\n        strokeWidth=0,\r\n        color=color.black, alpha=1.0})\r\n \r\n    math.randomseed(os.time())\r\n \r\n    for n=0, 100, 1 do\r\n        -- star is local to a single loop call, but on each call a new vector object is created\r\n        -- Without \"local\", this would still work, but we'd have to do star=nil at the end or\r\n        -- the final object would still be referenced at the end\r\n        local star = director:createLines({x=math.random(0, appWidth), y=math.random(0, appHeight), coords={0,0, 1,1}, strokeWidth = 1})\r\n \r\n        -- set start colour: get a random white value then allow some variance in each channel for off-white result\r\n        local brightness = math.random(20, 127)\r\n        star.strokeColor = {math.random(brightness-20, brightness), math.random(brightness-5, brightness), math.random(brightness-20, brightness)}\r\n \r\n        background:addChild(star)\r\n \r\n        -- NB: background.children is now a table with references to the star objects.\r\n        -- star coords are now relative to background. We can now easily move them all by moving the background\r\n    end\r\n```\r\n\r\nAnd in tearDown, before background:removeFromParent, add:\r\n```lua\r\n    for k,v in pairs(background.children) do\r\n        v:removeFromParent() -- take object out of the scene, no references left so lua will garbage collect stars\r\n    end\r\n```\r\n\r\n## Quick Tip\r\n\r\nWhen a Lua error occurs, the app will output info to the console but will usually continue running unless a serious error is encountered in the internal C++ code (usually due to your bad Lua code :p). This can make finding the error in the console awkward as trace will keep running way past the error itself.\r\n\r\nA good solution is to add the following to your resources/app.icf file:\r\n```\r\n[s3e] WindowSuspendOnFocusLoss=1\r\n```\r\n\r\nFor those new to Marmalade, app.icf is a standard Marmalade config file for setting runtime options. This option will suspend the app on Desktop when the window is out of focus (device builds are automatically paused on focus loss). With this set, you can just click on the trace console window to make the app window, and therefore all tracing, pause.\r\n\r\nIt's always worth scrolling back through the trace if it doesn't appear to tell you a lot. A Lua error may have occured long before you notice any side-effects on screen.\r\n\r\n## Notes on updates from Beta version to v1.0 release\r\n- myNode:destroy() was listed in the beta docs... this is an error as it doesn't actually exist! We \"destroy\" a Quick node by doing myNode:removeFromParent() then myNode = nil (see the background object in the code).\r\n- myNode.children is a table with references to each object added with myNode:addChild() - this is really useful but was not documented in the beta.\r\n- Rectangles and circles now have default anchor points of (0,0) like any other node. In the beta, they had undocumented (0.5,0.5) anchors so they were drawn centred on the x & y position but this was considered confusing: inconsistent with other shapes; children positions were non-intuitive as they ignore the anchor offset.\r\n\r\n## Adding balls and timers\r\nFirst, we'll define some useful globals for managing the scene:\r\n```lua\r\nminX = -appWidth/2\r\nmaxX = appWidth/2\r\nminY = -appHeight/2\r\nmaxY = appHeight/2\r\nballRadius = 8\r\n```\r\n\r\nIn SceneBattle:SetUp(), we set up timers to add more balls. We also create an \"origin\" node object at screen center so that other objects can be positioned relative to this point by making them its children.\r\n```lua\r\n    ballSpeed = 1\r\n    ballCreateFlag = 10 -- queues up balls to add at any time\r\n    ballTimer = system:addTimer(addNewBall, 10, 0)\r\n    ballReplaceTimer = system:addTimer(replenishBalls, 0.2, 0)\r\n    origin = director:createNode({x=appWidth/2, y=appHeight/2})\r\n```\r\n\r\nLets create a ball object (using the \"class\" method with metatable lookup). We'll manage ball movement ourselves as its so simple but can \"upgrade\" to Quick's built in physics (box2d) if needed.\r\n```lua\r\nCollidable = {}\r\nCollidable.__index = Collidable\r\n \r\ncollidables = {}\r\n \r\nfunction Collidable.Create(objType, xPos, yPos, startVector)\r\n    local collidable = {}                -- the new object\r\n    setmetatable(collidable,Collidable)  -- make Player handle lookup\r\n \r\n    if objType == \"expander\" then --extend to ues for weapons\r\n        -- do \r\n    elseif objType == \"heatseeker\" then\r\n        -- do\r\n        -- etc\r\n    else\r\n        collidable = director:createSprite({\r\n            x=xPos,\r\n            y=yPos,\r\n            xAnchor=0.5,\r\n            yAnchor=0.5,\r\n            source=\"textures/wrongball.png\"})\r\n \r\n        tween:from(collidable, {xScale=0, yScale=0, time=0.5}) --simple fade in anim\r\n        end\r\n    collidable.vec = startVector\r\n    collidable.objType = objType\r\n \r\n    origin:addChild(collidable)\r\n    collidables[collidable.name] = collidable --node.name is a unique ID so we can track balls in the scene easily\r\n    return collidable\r\nend\r\n```\r\n\r\nAnd finally implement the timer functions for adding new balls:\r\n```lua\r\nfunction VectorFromAngle(angle, size)\r\n    return {x = (math.sin(angle) * size), y = (math.cos(angle) * size)}\r\nend\r\n \r\nlocal addBall = function()\r\n    -- we push the ball straight to a global table in create so no need to get a ref here\r\n    Collidable.Create(\"ball\", 0, 0, VectorFromAngle(math.rad(math.random(0,359)), math.random(ballSpeed,ballSpeed+3)))\r\nend\r\n \r\nlocal addNewBall = function(event)\r\n    ballSpeed = ballSpeed + 1\r\n    addBall()\r\nend\r\n \r\nlocal replenishBalls = function(event)\r\n    if ballCreateFlag > 0 then\r\n        ballSpeed = ballSpeed + 0.3\r\n        ballCreateFlag = ballCreateFlag -1\r\n        addBall()\r\n    end\r\nend\r\n```\r\n\r\n## Adding players, controls and health\r\nWe add a player class like the collidables. Note that we're doing cheap collision detecting so have hard coded some size values. There's also a simple text label for health and we jump straight back to the main menu on health hitting zero.\r\n\r\n```lua\r\nPlayer = {}\r\nPlayer.__index = Player -- meta table to implement a \"class\" in lua\r\n \r\nfunction Player.Create(id, health)\r\n    local player = {}\r\n    setmetatable(player,Player)\r\n \r\n    -- initialize the object\r\n    player.id = id -- player is just a table and we're assigning key-value pairs to it\r\n    player.touch = {}\r\n    player.touch.x = nil\r\n    player.touch.y = nil\r\n    player.velocity = 0\r\n    player.moveWithFinger = false\r\n    player.health = health\r\n \r\n    player.touchPosDiff = nil\r\n    player.halfHeight = 21 --for detecting collisions\r\n    player.sledColour = nil\r\n \r\n    -- Visual stuff\r\n    -- Sleds are 8x42 with anchor at \"front\"\r\n    -- y pos of sled used for movement\r\n    local mirrorX = nil\r\n    local xPos = nil\r\n \r\n    if id == 1 then\r\n        mirrorX = 1\r\n        player.sledColour = color.fuchsia\r\n        xPos = -appWidth/2 + 20\r\n    else\r\n        mirrorX = -1\r\n        player.sledColour = color.yellow\r\n        xPos = appWidth/2 - 20\r\n    end\r\n \r\n    -- for now, use cheap labels for health\r\n    player.label = director:createLabel({x=20, y=appHeight-40, text=health})\r\n    player.label.color = player.sledColour\r\n    if id == 2 then player.label.x=appWidth-40 end\r\n    player.sled = director:createSprite({x=xPos, y=0, xAnchor=0.5, yAnchor=0.5, source=\"textures/sledp\" .. id .. \".png\"})\r\n \r\n    -- pre-calculate collision pos for balls to do super-cheap collision detection\r\n    player.collideX = player.sled.x + mirrorX*ballRadius\r\n    player.collideY = player.halfHeight + ballRadius --relative to sled\r\n \r\n    origin:addChild(player.sled)\r\n    return player\r\nend\r\n \r\nfunction Player:Destroy()\r\n    self.sled:removeFromParent()\r\n    self.label:removeFromParent()\r\nend\r\n \r\n-- some functions we'll add later\r\nfunction Player:AddAmmo(amount)\r\nend\r\n \r\nfunction Player:AddHealth(amount)\r\nend\r\n \r\nfunction Player:Fire(weapon)\r\nend\r\n \r\nfunction Player:TakeHit() -- simple \"flash\" anim\r\n    tween:to(self.sled, {alpha=0.2, time=0.1})\r\n    tween:to(self.sled, {alpha=1.0, time=0.1, delay=0.1})\r\n    self.health = self.health -1\r\n    if self.health == 0 then\r\n        director:moveToScene(sceneMainMenu, {transitionType=\"slideInR\", transitionTime=0.5})\r\n    end\r\n \r\n    self.label.text = self.health\r\nend\r\n```\r\n\r\nBack in our SceneBattler:SetUp event, we set up the players:\r\n```lua\r\n    player1 = Player.Create(1, 5)\r\n    player2 = Player.Create(2, 5)\r\n \r\n    players = {}\r\n    table.insert(players, player1)\r\n    table.insert(players, player2)\r\n```\r\n\r\n## Collisions and Touch Control\r\nFinally, we add some touch controls for player one and simple collision testing. The touch events move the sled exactly with the finger, and then apply some decelerated velocity on release.\r\n```lua\r\nfunction sceneBattle:touch(event)\r\n    event.y = event.y - appHeight/2 --touch 0,0 always bottom left; align with our origin\r\n \r\n    if event.phase == \"began\" then\r\n        player1.touch.x = event.x\r\n        player1.touch.y = event.y\r\n        player1.velocity = 0\r\n        player1.touchPosDiff = event.y - player1.sled.y\r\n    end\r\n \r\n    if event.phase == \"ended\" then\r\n        player1.moveWithFinger = false\r\n    end\r\n \r\n    if event.phase == \"moved\" then\r\n        xDiff = event.x - player1.touch.x\r\n        yDiff = event.y - player1.touch.y\r\n        player1.touch.x = event.x\r\n        player1.touch.y = event.y\r\n \r\n        player1.moveWithFinger = true\r\n        player1.velocity = yDiff --on finger-off, continue moving (will decelerate)\r\n    end\r\nend\r\n \r\nfunction sceneBattle:update(event)\r\n    -- Sled Movement:\r\n \r\n    -- move exactly with finger while finger is down\r\n    if player1.moveWithFinger == true then\r\n        player1.sled.y = player1.touch.y - player1.touchPosDiff\r\n    else\r\n        -- if finger is up, keep moving but decelerate\r\n        player1.sled.y = player1.sled.y + player1.velocity\r\n \r\n        if player1.velocity > 0 then\r\n            player1.velocity = player1.velocity - 1\r\n        elseif player1.velocity < 0 then\r\n            player1.velocity = player1.velocity + 1\r\n        end\r\n    end\r\n \r\n    -- keep within screen bounds\r\n    if player1.sled.y > maxY - player1.halfHeight then\r\n        player1.sled.y = maxY - player1.halfHeight\r\n        player1.velocity = 0\r\n    elseif player1.sled.y < minY + player1.halfHeight then\r\n        player1.sled.y = minY + player1.halfHeight\r\n        player1.velocity = 0\r\n    end\r\n \r\n    -- Balls:\r\n    for k,obj in pairs(collidables) do\r\n        -- movement:\r\n        obj.y = obj.y + obj.vec.y\r\n        obj.x = obj.x + obj.vec.x\r\n \r\n        -- super simplistic bounce function. We put the ball on the screen edge rather than moving exactly\r\n        if obj.x > maxX then\r\n            obj.x = maxX\r\n            obj.vec.x = -obj.vec.x\r\n            -- bullets bounce once\r\n            if obj.objType == \"bullet\" then obj.bulletFlag = 1 end\r\n        end\r\n        if obj.x < minX then\r\n            obj.x = minX\r\n            obj.vec.x = -obj.vec.x\r\n            if obj.objType == \"bullet\" then obj.bulletFlag = 1 end\r\n        end\r\n        if obj.y > maxY then\r\n            obj.y = maxY\r\n            obj.vec.y = -obj.vec.y\r\n        end\r\n        if obj.y < minY then\r\n            obj.y = minY\r\n            obj.vec.y = -obj.vec.y\r\n        end\r\n \r\n        -- Collisions (cheap collisions, ignoring fact ball is rounded!)\r\n        for pK,player in pairs(players) do\r\n            playerCollideYTop = player.sled.y + player.collideY\r\n            playerCollideYBot = player.sled.y - player.collideY\r\n \r\n            if ((player.collideX < 0 and obj.x < player.collideX) or (player.collideX > 0 and obj.x > player.collideX))\r\n                and obj.y < playerCollideYTop and obj.y > playerCollideYBot then\r\n \r\n                player:TakeHit()\r\n                local fx = director:createCircle({\r\n                    x=obj.x,y=obj.y,\r\n                    xAnchor=0.5,yAnchor=0.5,\r\n                    radius=ballRadius,\r\n                    color=color.lightBlue, strokeWidth=0})\r\n                origin:addChild(fx)\r\n                tween:to(fx, {radius=ballRadius*3, alpha=0, time=0.3, onComplete=NodeDestroy})\r\n \r\n                print(\"destroy obj \" .. obj.name)\r\n                obj:removeFromParent()\r\n                collidables[obj.name] = nil\r\n \r\n                --replace destroyed ball\r\n                ballCreateFlag = ballCreateFlag + 1\r\n                break\r\n            end\r\n        end\r\n    end\r\nend\r\n \r\nfunction NodeDestroy(target)\r\n    target:removeFromParent()\r\nend\r\n```\r\n\r\nIn the battle setUp and tearDown events we register and cancel the event handlers:\r\n```lua\r\n    system:addEventListener({\"touch\", \"update\"}, sceneBattle)\r\n    ...\r\n    system:removeEventListener({\"touch\", \"update\"}, sceneBattle)\r\n```\r\n\r\nAnd that's it for our basic game logic.\r\n\r\n![new game screenshot](http://i1353.photobucket.com/albums/q663/GazDeaves/protoscreen_zpsacb418b1.png)\r\n\r\n## Testing on device\r\nI'm not gonna cover setting up for device testing in this post (check the basics here: http://quick-docs.madewithmarmalade.com/usingthelaunchpad.html) but we have an issue that our game is fixed to 640x480 resolution.\r\n\r\nInitially we'll take the easiest, but not the most elegant, way to deal with this and just fix to landscape and stretch our app to the screen. Open resources/app.icf and add the following:\r\n```\r\n[S3E]\r\nDispFixRot=Landscape\r\n \r\n[GL]\r\nVirtualWidth=640\r\nVirtualHeight=480\r\nVirtualLetterbox=1\r\n```\r\n\r\nThe source for the Wrong prototype v1 is up on Github here: github.com/nickmarmalade/wrong-prototype\r\n\r\n# Building a Marmalade Quick Game part 4: API Best Practice\r\n\r\nThis post goes into detail about all the important concepts and best-practice tips learnt in my initial few weeks working with Marmalade Quick. It takes a lot of concepts from my previous post on Lua and puts them into context with Marmalade Quick.\r\n\r\nTo find out more about Marmalade Quick, you can head over to [this page](http://madewithmarmalade.com/quick) where you'll get the latest on the new version, as well as links to download so you can start coding straight away. If you have any burning questions that aren't covered in this series, you can head over to our developer network, [Marmalade Answers](https://devnet.madewithmarmalade.com/index.html), where you'll find helpful tips from our community and can even post your own requests for help.\r\n\r\n## Arrays vs Tables\r\nVariable length Lua arrays can be confusing in Lua! (see 'Tables as \"Arrays\"' in the Lua post)\r\n\r\nIf you don't need to use contiguous integer values to access items in a list (e.g. you don't need them in a given order when looping though) then you should probably just stick to plain tables. You can loop through items in a table with a for loop. If you need a unique value to use for the key to an item and your item is (or contains as a member) a Quick \"node\" object, then you can just use `myNode.name` to get a guaranteed unique ID to use as the key. Unlike an array, you can also safely nil a table value in a `pairs()` loop which makes destroying game objects easy.\r\n\r\nExample:\r\n```lua\r\nmyNodes = {}\r\nnode1 = director:createNode(...)\r\nnode2 = director:createNode(...)\r\nmyNodes[node1.name] = node1\r\nmyNodes[node2.name] = node2\r\nfor key,value in pairs(myNodes) do\r\n    --value is the node\r\n    --key is node.name\r\n \r\n    value = nil\r\n    -- This will only set the local reference \"value\", not affect the table!\r\n    -- myNodes[key] will still return the node now, not nil.\r\n \r\n    myNodes[key] = nil\r\n    -- If this index referred to a table (it does since \"nodes\" are tables), the object is no longer referenced by mNodes and will be garbage collected when appropriate. Note that we still have a reference to it, e.g. \"node1\", so that wont happen till that's also nilled.\r\nend\r\n```\r\n \r\n## Using Object Oriented Design\r\nOut of the box, Lua basically only supports values (numbers and strings) and key-indexed tables. But you can use tables to implement a wide range of other data types, including class-like objects. You'll almost definitely want to implement classes of some sort for a game. Quick's own object types like the node also provide their own object oriented functionality.\r\n\r\n### Creating Classes\r\nRead 'Tables as \"classes\" and the hidden \"self\" reference' in the introduction to Lua blog post above for info on creating basic classes in Lua. That method uses metatables to create classes. Quick provides some helpers to make this easier, namely the `baseClas`s global and the `inheritsFrom()` function. These implement the metatables trickery for you so you dont have to worry about how to do that. You can create new classes by just calling `myClass = inheritsFrom(baseClass)` and then implementing new() and init() functions for your class. You can then also do single inheritance using `myOtherNewClass = inheritsFrom(myClass)`. See Lua and object orientation for a guide to doing this.\r\n\r\nThese methods works well for classes you create yourself, but you cannot use them to inherit from Quick's node objects...\r\n\r\n### Classes and Quick objects vs. Lua tables\r\n**NB: The \"objects\" and \"libraries\" provided with Quick look like lua tables. However, it is important to know that Quick objects are not actually tables! They are userdata types.**\r\n\r\nThe userdata type allows arbitrary C data to be stored as a Lua variable. Userdata types are used to represent new types created by an application or library written in C. Internally, Quick uses Lua's C binding functionality to expose C objects (from the fast C++ Quick engine) to the Lua API, and it creates metadata types to do this. You don't need to understand how this works at all, but it means that while Quick's built in objects like nodes and sprites look like Lua tables, you cannot always use them in the same way as tables.\r\n\r\nThe notable constraints for Quick's metadata objects are:\r\n- Nodes are always created by the director, using `director:createXXX()` functions. This means that you cant just have an \"empty\" object that you can tweak values for before creating and pushing into the scene. They exist the moment the director creates them. You can however hide a visual node using `myNode.isVisible=false` or move it out of the current scene using `myNode:removeFromParent()` while keeping a handle to it until it is needed later.\r\n- You cannot use `setmetatable()` with metadata.\r\n\r\nThe two constraints above collectively mean that **you cannot use Quick's node objects with `inheritsFrom()` or easily create a class that inherits a Quick object**. That means that, for example, if you want to have a class that encapsulates all the data for your player in your game, you cannot have a Player class that inherits from a Quick sprite. You would create a Player class, and then have to have the sprite as a member of the Player.\r\n\r\nYou can directly access member values and functions of Quick's objects just as with tables. That includes non-documented internals - remember that Quick is open source so you can view and edit the Lua internals. Lua internal code all lives in the \"quicklua\" folder of your app. You can also add values, so for example with our Player example above you could create a sprite and then add a .player value to the sprite which points to the Player the sprite belongs to.\r\n\r\nQuick's functions use either the \".\" operator or the \":\" operator. Functions declared with \":\" versions will be automatically passed a self parameter (a reference to the object/table the function is a member of) when they are called. Quick's \"node\" object and its descendants like \"sprite\" and \"circle\" have functions for which the self parameter will give you access to the unique node involved, which is useful in callback style situations.\r\n\r\n## Using Marmalade Quick's Node Object\r\nIf you need to create a class for some object in your app, remember that you cannot re-use/inherit a Marmalade Quick node for the reasons described above. You need to create a custom class and then add any nodes needed as members. For example:\r\n```lua\r\nmyShip = {}\r\nmyShip.health = 10\r\nmyShip.img = director:createSprint(...)\r\n```\r\n\r\nThere are many functions that trigger events - for example, `node:addTimer()` or `tween:to()`. These functions will have one parameter that is the function to call when they complete (a \"callback\"), for example the function when the timer expires (funcortable) or when the tween is over (`onComplete`). They also either take a reference to the node involved or implicitly know the node as they are member functions of it (e.g. `myNode:addTimer`). You will usually want a handle back to the object that the event is related to when the event occurs, for example if you set a timer after which you want an object to \"explode\". Quick handles this by passing an table called event to the callback function, where event.target is the object. Often you want a handle to your own game class, i.e. myShip above, and not the Quick node so you will have to create a pointer from the node back to your object.\r\n```lua\r\nmyShip.img.ship = myShip --pointer from Quick object back to custom one\r\nmyShip.img:addTimer(Explode, 20, 1) --start a timer that will internally track the img node that called it\r\nfunction Explode(event) --when timer ends, event.target is the img node that called it\r\n    event.target.ship:MakeExplode() --we can get the ship back from the img via our .ship reference\r\nend\r\n```\r\n\r\nQuick timer functions can either be called from the global system object or from a node (or descendant of node like vector, sprite, circle, etc.) If you use the node version (e.g. `myNode:addTimer(myFunction,...)` then the callback function (e.g. `myFunction` here) gets a handle back to the node itself via event.target as shown above. If the node gets destroyed then the timer will also automatically cancel itself (the timer gets nil-ed with the node). If you use `system:addTimer(funcortable,...)`, the only way to track an object is by passing the object as the funcortable parameter (see Functions with \"funcortable\" parameters below). This is less flexible since the object needs to have a function matching the event name, so it is recommended to use `node:addTimer`, etc. if dealing with nodes.\r\n\r\nHere's an example of a class using timers, a node and the inheritsFrom \r\n```lua\r\nfunction:\r\ncSpaceShip = inheritsFrom(baseClass)\r\n \r\nfunction cSpaceShip:new(health, ammo, startX, startY)\r\n    local o = cSpaceShip:create()\r\n \r\n    o.visualShip = director:createNode({x=startX, y=startY, ...})\r\n    o.visualShip.ship = o\r\n    o.health = health\r\n    o.ammo = ammo\r\n    ...\r\n    add other visual stuff as children\r\n    set other internal values\r\n    etc\r\n    ...\r\n    return o\r\nend\r\n \r\nfunction RestoreHealth(event)\r\n    event.target.ship.health = event.target.ship.health + 1\r\nend\r\n \r\nmyShip = cSpaceShip:new(10,100, 50,50)\r\nmyShip:addTimer(RestoreHealth, 20, 0)\r\n```\r\n\r\n## Marmalade Quick Parent and Child Nodes and Using Local Coordinate Spaces\r\nMarmalade Quick uses descendants of nodes - circles, vectors, sprites, etc - to display and position visual objects. Each object of these types has a visual element, a position, various attributes, and can be made a child of other nodes. Children are positioned relative to their parent's x & y origin values (i.e. the values given as the parent's x= and y= constructor values). Nodes that aren't explicitly made a child of another node are children of the scene. The scene itself is a type of node and has its x & y origin at the bottom left of the screen.\r\n\r\nAll nodes are drawn with their bottom left corner at their x & y origin. One type that is slightly different is vectors/lines which has it's origin at it's specified x & y position, with its various points/lines relative to that position (since you can have negative points in a line).\r\n\r\nMarmalade Quick has a concept of \"anchors\" which can be set for any object. Anchors move the object visually from it's x & y position, by a proportion of the size of the node itself. You specify x & y anchors as a values from 0 to 1, not in pixels. `xAnchor=0` means position in default place. `xAnchor=1` means move the \"anchor\" to the right by the width of the node, which effectively means that the image is drawn to the left of the default position, so that its right edge is at the nodes x,y position. Children of a node are positioned relative to the node's original x,y position and not its anchor offset. The point of anchors is basically to allow you to position sprites in a more intuitive way. For example a \"wheel\" sprite might want the anchor at (0.5,0.5) so it is centred at the node's x,y position.\r\n\r\n**NB: Anchors are not designed for creating some sort of local coordinate system for an object. Do not try to use them to position children relative to the parent!**\r\n\r\nFor example, if you want to position a parent at (100,50) and a child at 10,10 from a specific point on the parent, you can't easily use the anchor to do that since children do not inherit the anchor offset. Also, the anchor values are fractions of the parent size, which is very unintuitive for positioning in pixels. You could use the anchors in this way, but then you also will likely end up setting the parent's x & y position to something unintuitive and are limited to 0-1*width or height to offset by.\r\n\r\nWhat if you want to create a local coordinate space to position a group of objects relative to? The simplest example is if you want to have the centre of the screen as you scene origin. To achieve this, just use a non-visual \"node\" object (not a sprite, circle, etc) as the parent, by calling `director:createNode(...)`. You can then treat this as a local origin by adding other nodes as children of it. Similarly, you might want a local origin so objects can rotate around some given point, and again a \"dummy node\" is the solution.\r\n\r\nExample - A ship object, positioned by it's centre point and relative to the screen centre, with 2 gun objects that rotate around a point on the front of the ship:\r\nworldOrigin = director:createNode(appwidth/2,appheight/2)\r\n```lua\r\nmyShip = director:createSprite({\"myship.png\", x=100, y=100, xAnchor=0.5, yAnchor=0.5})\r\nworldOrigin:addChild(myShip)\r\n-- ship png is facing upwards by default, using anchor to have the displayed sprite centred on its position.\r\n-- children are still positioned relative to x & y (i.e. middle of the diplsyed ship) as they dont inherit anchors.\r\n \r\nshipGuns = director:createNode(x=0,y=30)\r\nmyShip:addChild(shipGuns) --guns node now sits towards front of ship (30 pixel offset)\r\n \r\ngunLeft = createSprite({\"gun.png\", x=-10, y=0, xAnchor=0.5, yAnchor=0})\r\nshipGuns:addChild(gunLeft)\r\ngunRight = createSprite({\"gun.png\", x=10, y=0, xAnchor=0.5, yAnchor=0})\r\nshipGuns:addChild(gunRight) -- guns are positioned to sides of non-visual pivot point\r\n```\r\n\r\n## Destroying Objects and Removing Them From the Scene\r\nThe correct way to \"destroy\" an object is to call `myNode:removeFromParent()`, or `myParent:removeChild(myNode)` and then make sure all references to myNode in your code are set to nil. At any point, an active node will have a parent node. This might be another node - e.g. one sprite is the child of another via `node:addChild()` - or it may be the current scene. director:createNode/Sprite/etc. makes the new node a child of the current scene (the scene itself is a type of node). Nodes only ever have one parent; if a node already has a parent, calling `myNewParent:addChild(myNode)` will automatically remove it from it's existing parent. Often the only variable pointing to a node will be another node's .children table so you won't have to explicitly nil anything after calling `removeFromParent()`. See [Cleaning up scene texture resources - sprites, atlases, animations and fonts](http://docs.madewithmarmalade.com/display/MD/Cleaning+up+scene+texture+resources+-+sprites%2C+atlases%2C+animations+and+fonts) in the Quick docs for info on cleaning up any resources like textures once you have finished with them.\r\n\r\n## Events\r\nIn a nutshell, events work as follows:\r\n- The event itself is a table that is returned to a handler function in some specific situation.\r\n- You declare functions to handle events. These functions take a single parameter which the event object (table) will be passed to. Call the param what you want, but it's good practice to use \"event\"! e.g. `myHandlerFunction = function(event)`.\r\n- You register for events by calling handler registration functions of relevant objects.\r\n- The objects in Marmalade Quick that handle events are:\r\n- The global \"system\" object - add handlers with `system:addEventListener listOfEventNames, funcortable)`.\r\n- \"nodes\" - add handlers with `myNode:addEventListener(listOfEventNames, funcortable)`.\r\n- There are also events specifically for \"scenes\" (a special type of node) which occur when `director:moveToScene()` is called.\r\n- For timer events, event.timer is a handle to the timer itself.\r\n- For timer or tween events that were called for a node, `event.target` is a handle to the node.\r\n\r\n## Functions with \"funcortable\" Parameters\r\nFunctions documented as having a \"funcortable\" parameter can be passed either:\r\n- a reference to a single function of any name\r\n- a reference to a table, which must contain a member function (or functions) named the same as the event(s) being registered\r\n\r\nTypically, funcortables are useful when working in an object-oriented fashion. You can pass a class-style object as the funcortable value and give that object functions that match the expected names. Note that the event names are passed as a list (table) so you can register lots of events at once. Simple example.\r\n```lua\r\nsceneMainMenu = director:createScene()\r\nsceneMainMenu:addEventListener({\"setUp\", \"exitPostTransition\"}, sceneMainMenu)\r\n \r\nfunction sceneMainMenu:touch(event)\r\n    if event.phase == \"began\" then\r\n        director:moveToScene(nextScene, {transitionType=\"slideInR\", transitionTime=1.0})\r\n        system:removeEventListener(\"touch\", sceneMainMenu)\r\n    end\r\nend\r\n \r\nfunction sceneMainMenu:setUp(event)\r\n    -- setup scene objects here\r\n    system:addEventListener(\"touch\", sceneMainMenu)\r\nend\r\n \r\nfunction sceneMainMenu:exitPostTransition(event)\r\n    -- destroy scene objects here\r\nend\r\n```\r\n\r\nNote that because the functions above are declared with \":\" syntax, they can also access the `sceneMainMenu` object itself using \"self\". This is the main upside of using a table. A simple function is useful if you want to register lots of functions of the same type of event. For example if you want to add a timer to a node, passing the node as the funcortable value means you can only register a single function, `myNode:timer`, whereas you likely want to have multiple timer events on one object. In this case you need to use a plain function and store your own pointer from the timer to the node if needed.\r\n\r\n## Debugging and Testing\r\nWhen a Lua error occurs, the app will output info to the console but will usually continue running unless an assert or serious error is encountered in the internal C++ code. This can make finding the error in the console awkward as trace will keep running.\r\n\r\nA good solution is to add the following to your app.icf:\r\n```\r\n[s3e] WindowSuspendOnFocusLoss=1\r\n```\r\n\r\nThis will suspend the app when the window is out of focus, so you can just click on the trace console to pause everything.\r\n\r\nNote that you're app won't automatically suspend timers, animations, etc on suspend events. Timer callback events will queue internally and then fire in rapid succession when the app resumes! But you can pause all timers and tweens manually yourself using `node:pauseTimers()` etc.\r\n\r\n**Note: The info below is for Marmalade 6. With Marmalade 7.0 and newer, Quick has been integrated into the new shared \"hub\" GUI and can be used with most platforms out of the box. See [Using the Hub](http://docs.madewithmarmalade.com/display/MD/Using+the+Hub) in the official docs**\r\n\r\nThe launchpad lets you pick \"Debug\" or \"Release\" mode with a radio button at the top for both Simulator and devices. Debug uses versions of the C++ Marmalade Quick pre-built binary and Marmalade loader (platform abstraction layer) that include tracing and asserts but will run slower; Release has no C++/native debug info or events. Note that option does not affect the Lua code at all! By efault dbg.print() will continue to output to console even in release mode.\r\n\r\nTo control lua debugging, you need to use config.lua (see http://quick-docs.madewithmarmalade.com/ConfiguringYourApp.html#config-lua-file) Essentially, Lua debugging features are mostly turned on by default and will slow your app down a *lot*, so for the store and when testing performance, you should do the following:\r\n- Add a config.lua file next to your main.lua\r\n- Set the following in config.lua:\r\n\r\n```lua\r\nconfig =\r\n{\r\n    debug =\r\n    {\r\n        general = false,\r\n        assertDialogs = false,\r\n        typeChecking = false,\r\n        traceGC = false,\r\n    }\r\n}\r\n```\r\n\r\nIn Marmalade Quick 1.0 when launching the Simulator from the Launchpad, even if you pick Release mode it will still use the debug loader which means there will be a performance hit - see below for a workaround. This does not affect device builds.\r\n\r\nIf you want someone to test your build without a Marmalade SDK or importing your Quick project, you can use the standard Deploy Tool (Advanced > Launch Deploy Tool) to do Windows/Mac x86 deployments if you have a Plus license or higher. The Deploy Tool is also useful as you can separately select between debug and release versions of the Marmalade loader (abstraction layer) and Quick app (C++ implementation of Quick). Release builds will run at full speed while debug ones will output internal debug info to trace but run slower. If you use the Deploy Tool release builds will use the release loader by default. If you have an Indie or community license, you can still pick Windows/Mac *Simulator* to test on desktop at full speed. The difference between Simulator and full deployment is that Simulator gives you settings menus and requires the SDK to run.\r\n\r\nYou probably want to test deployed builds at specific resolutions. Desktop deployed builds run windowed at 800x600 by default. Use [s3e] WinHeight= WinWidth= WinResizable= ICF options in app.icf to specify window size and behaviour when you don't have the Simulator menus.\r\n\r\n## Upgrading Projects From Older Quick Versions\r\nWe changed some APIs and broke back-compatibility between the beta and 1.0 Quick release version! If upgrading a project, you must replace the \"quicklua\" folder in the old project with a copy of the new one found in /quick/data/quicklua Some minor breaking changes were also added in Quick 1.1. See the change log in the Quick docs for more info.\r\n\r\n## What Happened to \"Wrong\"?\r\nMy little Weaponified Reverse pONG game is moving along slowly. As a proof of concept, I've uploaded a version (that's slightly more advanced than the one in part 3...) to the BlackBerry World store for BlackBerry 10. Treat that as a preview of the weapons, effects and retro styling I'll be covering in the next post: [View and download Wrong for BlackBerry 10](http://appworld.blackberry.com/webstore/content/24134883/)\r\n\r\n\r\n# Authors and Contributors\r\nThe prototype and blog are both written by Nick Smith @nickmarmalade.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}